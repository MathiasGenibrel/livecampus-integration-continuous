name: 'Build and Deploy'

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    # On aurait pu utiliser une strategy pour tester différentes versions de NodeJS

    steps:
      # Vérification du contenu du commit.
      - uses: actions/checkout@v3

      # Mise en place de l'environnement NodeJS.
      - name: Setup NodeJS environment
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      # Installation des dépendances.
      - name: Install dependencies
        run: npm ci

      # Lancement des tests sur notre application Front
      - name: Test Web-App Application
        run: npx nx affected --target=test --all --parallel --max-parallel=3 --ci --code-coverage

      # Construction de nos applications avec Nx (Monorepo)
      - name: Build Web-App Application
        run: npx nx affected --target=build --all --parallel --max-parallel=3 --ci --code-coverage

      # On utilise des artefacts pour stocker les applications construites
      - name: Save built apps on Artifact
        uses: actions/upload-artifact@v3
        with:
          name: built-apps
          path: dist/packages/apps/

      # On utilise des artefacts pour stocker les orchestrations des applications
      - name: Save built apps on Artifact
        uses: actions/upload-artifact@v3
        with:
          name: orchestration-apps
          path: orchestration/

  deploy:
    # On dépend du job "build" pour récupérer les artefacts
    needs: [build]
    runs-on: ubuntu-latest

    steps:
      # On récupère les artefacts
      - name: Get Artifact
        uses: actions/download-artifact@v3
        with:
          path: ./

      # TODO: Ajouter le Dockerfile dans la web app

      # On déploie les applications sur notre serveur OVH
      - name: Copy built apps to OVH server
        uses: Burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr --delete
          path: built-apps/
          remote_path: ${{ secrets.DEPLOY_PATH }}
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}

      # On déploie les orchestrations sur notre serveur OVH
      - name: Copy built apps to OVH server
        uses: Burnett01/rsync-deployments@5.2.1
        with:
          switches: -avzr --delete
          path: orchestration-apps/
          remote_path: ${{ secrets.DEPLOY_PATH }}
          remote_host: ${{ secrets.DEPLOY_HOST }}
          remote_user: ${{ secrets.DEPLOY_USER }}
          remote_key: ${{ secrets.DEPLOY_KEY }}

      - name: Deploy to OVH server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          # TODO: Changer les scripts de démarrage de l'app
          script: |
            whoami
            ls -la
